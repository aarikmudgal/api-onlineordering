$baseColors: (
  // Base colors
  metro-blue: #002d72,
  metro-yellow: #ffed00,
  blue: #0064fe,
  green: #34c082,
  red: #de351b,
  grey: #001432,
  white: #ffffff,
  black: #000000,
  purple: #9b0053
);

$colorModificators: (
  tint: (
    colors: (
      metro-blue,
      blue,
      green,
      red,
      grey,
      purple
    ),
    degrees: (
      20,
      40,
      60,
      80,
      90,
      95
    )
  ),
  shade: (
    colors: (
      metro-blue,
      blue,
      red,
      green,
      purple
    ),
    degrees: (
      20,
      40,
      60
    )
  )
);

/// Helper function to retrieve color styles from sass-map.
///
/// @author christian.nies@uxi.de
///
/// @param {Length} $key - Elements color
///
/// @example scss - Assign color styles to given `[selector]`
///   [selector] {
///     @include color( brand_1 );
///   }
@function color($colorName) {
  @if map-has-key($baseColors, $colorName) {
    @return map-get($baseColors, $colorName);
  }

  @warn "Unknown `#{$colorName}` in $baseColors.";
  @return null;
}

/// Lighten given color
/// @access public
/// @param {Color} $colorName - color to tint
/// @param {Number} $degree - degree of `$color` in returned color
/// @return {Color}
@function color-tint($colorName, $degree) {
  $modificator: map-get($colorModificators, tint);
  $modifiableColors: map-get($modificator, colors);
  $modifierDegrees: map-get($modificator, degrees);

  @if null == index($modifiableColors, $colorName) {
    @warn "Color `#{$colorName}` is not modifiable";
  }

  @if null == index($modifierDegrees, $degree) {
    @warn "Color should not be tinted by `#{$degree}` percentages";
  }

  @return mix(white, color($colorName), $degree);
}

/// Darken given color
/// @access public
/// @param {Color} $colorName - color to shade
/// @param {Number} $degree - degree of `$color` in returned color
/// @return {Color}
@function color-shade($colorName, $degree) {
  $modificator: map-get($colorModificators, shade);
  $modifiableColors: map-get($modificator, colors);
  $modifierDegrees: map-get($modificator, degrees);

  @if null == index($modifiableColors, $colorName) {
    @warn "Color `#{$colorName}` is not modifiable";
  }

  @if null == index($modifierDegrees, $degree) {
    @warn "Color should not be shaded by `#{$degree}` percentages";
  }

  @return mix(black, color($colorName), $degree);
}

@function color-resolve-modification($colorName, $modification, $degree) {
  @if $modification == tint {
    @return color-tint($colorName, $degree);
  } @else if $modification == shade {
    @return color-shade($colorName, $degree);
  } @else {
    @error "Unkonwn color modification `#{$modification}`";
  }
}

@mixin color-gradient-directional($startColor, $endColor, $deg: 45deg) {
  background-repeat: repeat-x;
  background-image: -webkit-linear-gradient($deg, $startColor, $endColor); // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient($deg, $startColor, $endColor); // Opera 12
  background-image: linear-gradient($deg, $startColor, $endColor); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
}
